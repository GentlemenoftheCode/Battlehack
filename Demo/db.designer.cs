#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BattleHackDB")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCharity(Charity instance);
    partial void UpdateCharity(Charity instance);
    partial void DeleteCharity(Charity instance);
    partial void InsertRaffle(Raffle instance);
    partial void UpdateRaffle(Raffle instance);
    partial void DeleteRaffle(Raffle instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    #endregion
		
		public dbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AzureServer"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Charity> Charities
		{
			get
			{
				return this.GetTable<Charity>();
			}
		}
		
		public System.Data.Linq.Table<Raffle> Raffles
		{
			get
			{
				return this.GetTable<Raffle>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Charity")]
	public partial class Charity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharityID;
		
		private string _Name;
		
		private string _Description;
		
		private string _WebsiteURL;
		
		private System.Data.Linq.Binary _Logo;
		
		private string _Tags;
		
		private EntitySet<Raffle> _Raffles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharityIDChanging(int value);
    partial void OnCharityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public Charity()
		{
			this._Raffles = new EntitySet<Raffle>(new Action<Raffle>(this.attach_Raffles), new Action<Raffle>(this.detach_Raffles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CharityID
		{
			get
			{
				return this._CharityID;
			}
			set
			{
				if ((this._CharityID != value))
				{
					this.OnCharityIDChanging(value);
					this.SendPropertyChanging();
					this._CharityID = value;
					this.SendPropertyChanged("CharityID");
					this.OnCharityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="NVarChar(MAX)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="NVarChar(MAX)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Charity_Raffle", Storage="_Raffles", ThisKey="CharityID", OtherKey="CharityID")]
		public EntitySet<Raffle> Raffles
		{
			get
			{
				return this._Raffles;
			}
			set
			{
				this._Raffles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Raffles(Raffle entity)
		{
			this.SendPropertyChanging();
			entity.Charity = this;
		}
		
		private void detach_Raffles(Raffle entity)
		{
			this.SendPropertyChanging();
			entity.Charity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Raffle")]
	public partial class Raffle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaffleID;
		
		private int _CharityID;
		
		private System.Nullable<int> _TicketsEntered;
		
		private System.Nullable<int> _UsersEntered;
		
		private System.Nullable<decimal> _ObjectiveDollars;
		
		private System.Nullable<decimal> _RaisedDollars;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private string _Title;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Charity> _Charity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaffleIDChanging(int value);
    partial void OnRaffleIDChanged();
    partial void OnCharityIDChanging(int value);
    partial void OnCharityIDChanged();
    partial void OnTicketsEnteredChanging(System.Nullable<int> value);
    partial void OnTicketsEnteredChanged();
    partial void OnUsersEnteredChanging(System.Nullable<int> value);
    partial void OnUsersEnteredChanged();
    partial void OnObjectiveDollarsChanging(System.Nullable<decimal> value);
    partial void OnObjectiveDollarsChanged();
    partial void OnRaisedDollarsChanging(System.Nullable<decimal> value);
    partial void OnRaisedDollarsChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Raffle()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Charity = default(EntityRef<Charity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaffleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaffleID
		{
			get
			{
				return this._RaffleID;
			}
			set
			{
				if ((this._RaffleID != value))
				{
					this.OnRaffleIDChanging(value);
					this.SendPropertyChanging();
					this._RaffleID = value;
					this.SendPropertyChanged("RaffleID");
					this.OnRaffleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityID", DbType="Int NOT NULL")]
		public int CharityID
		{
			get
			{
				return this._CharityID;
			}
			set
			{
				if ((this._CharityID != value))
				{
					if (this._Charity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharityIDChanging(value);
					this.SendPropertyChanging();
					this._CharityID = value;
					this.SendPropertyChanged("CharityID");
					this.OnCharityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketsEntered", DbType="Int")]
		public System.Nullable<int> TicketsEntered
		{
			get
			{
				return this._TicketsEntered;
			}
			set
			{
				if ((this._TicketsEntered != value))
				{
					this.OnTicketsEnteredChanging(value);
					this.SendPropertyChanging();
					this._TicketsEntered = value;
					this.SendPropertyChanged("TicketsEntered");
					this.OnTicketsEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersEntered", DbType="Int")]
		public System.Nullable<int> UsersEntered
		{
			get
			{
				return this._UsersEntered;
			}
			set
			{
				if ((this._UsersEntered != value))
				{
					this.OnUsersEnteredChanging(value);
					this.SendPropertyChanging();
					this._UsersEntered = value;
					this.SendPropertyChanged("UsersEntered");
					this.OnUsersEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectiveDollars", DbType="Money")]
		public System.Nullable<decimal> ObjectiveDollars
		{
			get
			{
				return this._ObjectiveDollars;
			}
			set
			{
				if ((this._ObjectiveDollars != value))
				{
					this.OnObjectiveDollarsChanging(value);
					this.SendPropertyChanging();
					this._ObjectiveDollars = value;
					this.SendPropertyChanged("ObjectiveDollars");
					this.OnObjectiveDollarsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaisedDollars", DbType="Money")]
		public System.Nullable<decimal> RaisedDollars
		{
			get
			{
				return this._RaisedDollars;
			}
			set
			{
				if ((this._RaisedDollars != value))
				{
					this.OnRaisedDollarsChanging(value);
					this.SendPropertyChanging();
					this._RaisedDollars = value;
					this.SendPropertyChanged("RaisedDollars");
					this.OnRaisedDollarsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Raffle_Ticket", Storage="_Tickets", ThisKey="RaffleID", OtherKey="RaffleID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Charity_Raffle", Storage="_Charity", ThisKey="CharityID", OtherKey="CharityID", IsForeignKey=true)]
		public Charity Charity
		{
			get
			{
				return this._Charity.Entity;
			}
			set
			{
				Charity previousValue = this._Charity.Entity;
				if (((previousValue != value) 
							|| (this._Charity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Charity.Entity = null;
						previousValue.Raffles.Remove(this);
					}
					this._Charity.Entity = value;
					if ((value != null))
					{
						value.Raffles.Add(this);
						this._CharityID = value.CharityID;
					}
					else
					{
						this._CharityID = default(int);
					}
					this.SendPropertyChanged("Charity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Raffle = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Raffle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private string _UserName;
		
		private int _RaffleID;
		
		private decimal _TicketPrice;
		
		private System.Nullable<bool> _Valid;
		
		private EntityRef<Raffle> _Raffle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnRaffleIDChanging(int value);
    partial void OnRaffleIDChanged();
    partial void OnTicketPriceChanging(decimal value);
    partial void OnTicketPriceChanged();
    partial void OnValidChanging(System.Nullable<bool> value);
    partial void OnValidChanged();
    #endregion
		
		public Ticket()
		{
			this._Raffle = default(EntityRef<Raffle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaffleID", DbType="Int NOT NULL")]
		public int RaffleID
		{
			get
			{
				return this._RaffleID;
			}
			set
			{
				if ((this._RaffleID != value))
				{
					if (this._Raffle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaffleIDChanging(value);
					this.SendPropertyChanging();
					this._RaffleID = value;
					this.SendPropertyChanged("RaffleID");
					this.OnRaffleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketPrice", DbType="Money NOT NULL")]
		public decimal TicketPrice
		{
			get
			{
				return this._TicketPrice;
			}
			set
			{
				if ((this._TicketPrice != value))
				{
					this.OnTicketPriceChanging(value);
					this.SendPropertyChanging();
					this._TicketPrice = value;
					this.SendPropertyChanged("TicketPrice");
					this.OnTicketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valid", DbType="Bit")]
		public System.Nullable<bool> Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Raffle_Ticket", Storage="_Raffle", ThisKey="RaffleID", OtherKey="RaffleID", IsForeignKey=true)]
		public Raffle Raffle
		{
			get
			{
				return this._Raffle.Entity;
			}
			set
			{
				Raffle previousValue = this._Raffle.Entity;
				if (((previousValue != value) 
							|| (this._Raffle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Raffle.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Raffle.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._RaffleID = value.RaffleID;
					}
					else
					{
						this._RaffleID = default(int);
					}
					this.SendPropertyChanged("Raffle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
